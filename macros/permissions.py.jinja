{# Paths format
  [
    {
      "mount_path": "/data1",
      "uid": 1000,
      "gid": 1000,
      "mode": "0644"
      "force": False
    },
  ]

 #}
{%- macro apply_permissions(paths = []) -%}
import pathlib
import os

paths = [{% for item in paths %} {{ item | tojson }}, {% endfor %}]

if not paths:
  print("No paths to apply permissions to")
  exit(0)

for item in paths:
  path = item['mount_path']
  if not pathlib.Path(path).exists():
    raise Exception(f"Path [{path}] does not exist")
  if any(pathlib.Path(path).iterdir()) and not item.get("force", False):
    raise Exception(f"Path [{path}] is not empty, skipping... Use [force=True] to override")

  if item.get("uid", None) and item.get("gid", None):
    print(f"Changing owner of [{path}] to [{item['uid']}:{item['gid']}]")
    os.chown(path, int(item['uid']), int(item['gid']))
    print("New owner:", (os.stat(path).st_uid, os.stat(path).st_gid))

  if item.get("mode", None):
    print(f"Changing mode of [{path}] to [{item['mode']}]")
    os.chmod(path, int(item['mode'], 8))
    print("New mode:", (os.stat(path).st_mode).to_octal())
{% endmacro %}
